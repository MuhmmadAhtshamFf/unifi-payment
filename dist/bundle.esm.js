module.exports=require("./lib/paypal-rest-sdk.js")();var e=Object.freeze({__proto__:null});const{configure:r,payment:t}=e;class s{constructor(e,t,s="sandbox"){if(!e||!t)throw new Error("PayPal clientId and clientSecret are required");r({mode:s,client_id:e,client_secret:t})}createPayment(e,r,s,n,a=""){if("number"!=typeof e||e<=0)throw new Error("Amount must be a positive number");if("string"!=typeof r||3!==r.length)throw new Error("Currency must be a three-letter ISO currency code");if("string"!=typeof s||"string"!=typeof n)throw new Error("Both returnUrl and cancelUrl must be strings");const o={intent:"sale",payer:{payment_method:"paypal"},redirect_urls:{return_url:s,cancel_url:n},transactions:[{amount:{currency:r,total:e.toFixed(2)}}],description:a};return new Promise(((e,r)=>{t.create(o,((t,s)=>{t?r(t):e(s)}))}))}}module.exports={APIContracts:require("./apicontracts.js"),APIControllers:require("./apicontrollers.js"),Constants:require("./constants.js").constants};var n=Object.freeze({__proto__:null});const{APIContracts:a,APIControllers:o}=n;class i{constructor(e,r){if(!e||!r)throw new Error("Authorize.Net API Login ID and Transaction Key are required");this.apiLoginId=e,this.apiTransactionKey=r}createPaymentIntent(e,r,t=""){if("number"!=typeof e||e<=0)throw new Error("Amount must be a positive number");if("string"!=typeof r||3!==r.length)throw new Error("Currency must be a three-letter ISO currency code");if("string"!=typeof returnUrl||!returnUrl)throw new Error("Return URL must be a non-empty string");if("string"!=typeof cancelUrl||!cancelUrl)throw new Error("Cancel URL must be a non-empty string");const s=new a.MerchantAuthenticationType;s.setName(this.apiLoginId),s.setTransactionKey(this.apiTransactionKey);const n=new a.TransactionRequestType;n.setTransactionType(a.TransactionTypeEnum.AUTHCAPTURETRANSACTION),n.setAmount(e),n.setCurrencyCode(r.toUpperCase()),t&&n.setDescription(t);const i=new a.CreateTransactionRequest;i.setMerchantAuthentication(s),i.setTransactionRequest(n);const c=new o.CreateTransactionController(i.getJSON());return new Promise(((e,r)=>{c.execute((()=>{const t=c.getResponse(),s=new a.CreateTransactionResponse(t);if(s.getMessages().getResultCode()===a.MessageTypeEnum.OK)e(s);else{const e=s.getMessages().getMessage()?s.getMessages().getMessage().map((e=>e.getText())).join(", "):"Unknown error occurred.";r(new Error(`Authorize.Net error: ${e}`))}}))}))}}var c=function(){function e(e,r){for(var t=0;t<r.length;t++){var s=r[t];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(r,t,s){return t&&e(r.prototype,t),s&&e(r,s),r}}();var u=require("./api"),p=require("../package.json"),y=require("./utils/razorpay-utils").validateWebhookSignature,l=function(){function e(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}(this,e);var t=r.key_id,s=r.key_secret,n=r.headers;if(!t)throw new Error("`key_id` is mandatory");this.key_id=t,this.key_secret=s,this.api=new u({hostUrl:"https://api.razorpay.com",ua:"razorpay-node@"+e.VERSION,key_id:t,key_secret:s,headers:n}),this.addResources()}return c(e,null,[{key:"validateWebhookSignature",value:function(){return y.apply(void 0,arguments)}}]),c(e,[{key:"addResources",value:function(){Object.assign(this,{accounts:require("./resources/accounts")(this.api),stakeholders:require("./resources/stakeholders")(this.api),payments:require("./resources/payments")(this.api),refunds:require("./resources/refunds")(this.api),orders:require("./resources/orders")(this.api),customers:require("./resources/customers")(this.api),transfers:require("./resources/transfers")(this.api),tokens:require("./resources/tokens")(this.api),virtualAccounts:require("./resources/virtualAccounts")(this.api),invoices:require("./resources/invoices")(this.api),iins:require("./resources/iins")(this.api),paymentLink:require("./resources/paymentLink")(this.api),plans:require("./resources/plans")(this.api),products:require("./resources/products")(this.api),subscriptions:require("./resources/subscriptions")(this.api),addons:require("./resources/addons")(this.api),settlements:require("./resources/settlements")(this.api),qrCode:require("./resources/qrCode")(this.api),fundAccount:require("./resources/fundAccount")(this.api),items:require("./resources/items")(this.api),cards:require("./resources/cards")(this.api),webhooks:require("./resources/webhooks")(this.api),documents:require("./resources/documents")(this.api),disputes:require("./resources/disputes")(this.api)})}}]),e}();l.VERSION=p.version,module.exports=l;var h=Object.freeze({__proto__:null});class d{constructor(e,r){if(!e||!r)throw new Error("keyId and keySecret are required");this.razorpay=new h({key_id:e,key_secret:r})}async createPaymentIntent(e,r,t=""){if("number"!=typeof e||e<=0)throw new Error("Amount must be a positive number");if("string"!=typeof r||3!==r.length)throw new Error("Currency must be a three-letter ISO currency code");let s=e;s="jpy"===r?1*e:100*e;try{return await this.razorpay.payment_intents.create({amount:s,currency:r.toUpperCase(),receipt:t||void 0,notes:t?{description:t}:{}})}catch(e){throw new Error(`Razorpay Payment failed: ${e.message}`)}}}Object.defineProperty(exports,"__esModule",{value:!0});const m=require("./platform/NodePlatformFunctions.js"),w=(0,require("./stripe.core.js").createStripe)(new m.NodePlatformFunctions);module.exports=w,module.exports.Stripe=w,module.exports.default=w;var f=Object.freeze({__proto__:null});class g{constructor(e){this.stripe=new f(e)}async createPaymentIntent(e,r,t=""){if("number"!=typeof e||e<=0)throw new Error("Amount must be a positive number");if("string"!=typeof r||3!==r.length)throw new Error("Currency must be a three-letter ISO currency code");let s=e;s="jpy"===r?1*e:100*e;try{const e={amount:s,currency:r.toUpperCase()};t&&(e.description=t);return await this.stripe.paymentIntents.create(e)}catch(e){throw new Error(`stripe payment failed : ${e.message}`)}}}class q{constructor(e,r){switch(e){case"stripe":this.gateway=new g(r.apiKey);break;case"razorpay":this.gateway=new d(r.keyId,r.keySecret);break;case"paypal":this.gateway=new s(r.clientId,r.clientSecret);break;case"authorizenet":this.gateway=new i(r.apiLoginId,r.apiTransactionKey);break;default:throw new Error("Unsupported payment gateway type")}}async createPayment(e,r,t,s,n){try{if(!e)return new Error("amount is required");if(!r)return new Error("currency is required");if(this.gateway.createPaymentIntent)return await this.gateway.createPaymentIntent(e,r);if(this.gateway.createPayment)return await this.gateway.createPayment(e,r,t,s,n);throw new Error("Unsupported payment gateway type")}catch(e){throw new Error(`Payment processing failed: ${e.message}`)}}}export{q as default};
//# sourceMappingURL=bundle.esm.js.map
