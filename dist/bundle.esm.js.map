{"version":3,"file":"bundle.esm.js","sources":["../node_modules/paypal-rest-sdk/index.js","../lib/Paypal.js","../node_modules/authorizenet/lib/authorizenet.js","../lib/authorizenet.js","../node_modules/razorpay/dist/razorpay.js","../lib/razorpay.js","../node_modules/stripe/cjs/stripe.cjs.node.js","../lib/stripe.js","../index.js"],"sourcesContent":["module.exports = require('./lib/paypal-rest-sdk.js')();\n","import * as paypal from 'paypal-rest-sdk';\r\nconst { configure, payment: _payment } = paypal;\r\nclass PayPalGateway {\r\n  constructor(clientId, clientSecret, environment = \"sandbox\") {\r\n    /**\r\n     * Initializes the PayPal gateway with the provided client ID and client secret.\r\n     * @param {string} clientId - Your PayPal client ID.\r\n     * @param {string} clientSecret - Your PayPal client secret.\r\n     */\r\n    if (!clientId || !clientSecret) {\r\n      throw new Error(\"PayPal clientId and clientSecret are required\");\r\n    }\r\n    configure({\r\n      mode: environment,\r\n      client_id: clientId,\r\n      client_secret: clientSecret,\r\n    });\r\n  }\r\n  /**\r\n   * Creates a payment with PayPal.\r\n   * @param {number} amount - The amount to be charged.\r\n   * @param {string} currency - The three-letter ISO currency code (e.g., 'USD').\r\n   * @param {string} returnUrl - The URL to redirect to after a successful payment.\r\n   * @param {string} [description] - An optional description for the payment.\r\n   * @param {string} cancelUrl - The URL to redirect to if the payment is canceled.\r\n   * @returns {Promise<Object>} - A promise that resolves with the payment object.\r\n   * @throws {Error} - Throws an error if the payment creation fails or validation errors occur.\r\n   */\r\n  createPayment(amount, currency, returnUrl, cancelUrl, description = \"\") {\r\n    if (typeof amount !== \"number\" || amount <= 0) {\r\n      throw new Error(\"Amount must be a positive number\");\r\n    }\r\n    if (typeof currency !== \"string\" || currency.length !== 3) {\r\n      throw new Error(\"Currency must be a three-letter ISO currency code\");\r\n    }\r\n    if (typeof returnUrl !== \"string\" || typeof cancelUrl !== \"string\") {\r\n      throw new Error(\"Both returnUrl and cancelUrl must be strings\");\r\n    }\r\n    const create_payment_json = {\r\n      intent: \"sale\",\r\n      payer: {\r\n        payment_method: \"paypal\",\r\n      },\r\n      redirect_urls: {\r\n        return_url: returnUrl,\r\n        cancel_url: cancelUrl,\r\n      },\r\n      transactions: [\r\n        {\r\n          amount: {\r\n            currency: currency,\r\n            total: amount.toFixed(2),\r\n          },\r\n        },\r\n      ],\r\n      description,\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n      _payment.create(create_payment_json, (error, payment) => {\r\n        if (error) {\r\n          reject(error);\r\n        } else {\r\n          resolve(payment);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport default PayPalGateway;\r\n","'use strict';\r\n\r\nmodule.exports = {\r\n\tAPIContracts: require('./apicontracts.js'),\r\n    APIControllers: require('./apicontrollers.js'),\r\n\tConstants: require('./constants.js').constants\r\n};\r\n\r\n","import * as authorizenet from 'authorizenet';\r\n\r\nconst { APIContracts, APIControllers } = authorizenet;\r\n\r\nclass AuthorizeNetGateway {\r\n  constructor(apiLoginId, apiTransactionKey) {\r\n    /**\r\n     * Initializes the Stripe gateway with the provided API key.\r\n     * @param {string} apiLoginId - Your Stripe secret API key.\r\n     * @param {string} apiTransactionKey - Your Stripe secret API key.\r\n     */\r\n    if (!apiLoginId || !apiTransactionKey) {\r\n      throw new Error(\r\n        \"Authorize.Net API Login ID and Transaction Key are required\"\r\n      );\r\n    }\r\n    this.apiLoginId = apiLoginId;\r\n    this.apiTransactionKey = apiTransactionKey;\r\n  }\r\n  /**\r\n   * Creates a payment with Authorize.Net.\r\n   * @param {number} amount - The amount to be charged in the smallest currency unit (e.g., cents for USD).\r\n   * @param {string} currency - The three-letter ISO currency code (e.g., 'USD').\r\n   * @param {string} [description] - An optional description for the payment.\r\n   * @param {string} returnUrl - The URL to redirect to after a successful payment.\r\n   * @param {string} cancelUrl - The URL to redirect to if the payment is canceled.\r\n   * @returns {Promise<Object>} - A promise that resolves with the payment response object.\r\n   * @throws {Error} - Throws an error if the payment creation fails or validation errors occur.\r\n   */\r\n  createPaymentIntent(amount, currency, description = \"\") {\r\n    if (typeof amount !== \"number\" || amount <= 0) {\r\n      throw new Error(\"Amount must be a positive number\");\r\n    }\r\n    if (typeof currency !== \"string\" || currency.length !== 3) {\r\n      throw new Error(\"Currency must be a three-letter ISO currency code\");\r\n    }\r\n    if (typeof returnUrl !== \"string\" || !returnUrl) {\r\n      throw new Error(\"Return URL must be a non-empty string\");\r\n    }\r\n    if (typeof cancelUrl !== \"string\" || !cancelUrl) {\r\n      throw new Error(\"Cancel URL must be a non-empty string\");\r\n    }\r\n    const merchantAuthentication =\r\n      new APIContracts.MerchantAuthenticationType();\r\n    merchantAuthentication.setName(this.apiLoginId);\r\n    merchantAuthentication.setTransactionKey(this.apiTransactionKey);\r\n\r\n    const transactionRequest = new APIContracts.TransactionRequestType();\r\n    transactionRequest.setTransactionType(\r\n      APIContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION\r\n    );\r\n    transactionRequest.setAmount(amount);\r\n    transactionRequest.setCurrencyCode(currency.toUpperCase());\r\n    if (description) {\r\n      transactionRequest.setDescription(description);\r\n    }\r\n    const createTransactionRequest =\r\n      new APIContracts.CreateTransactionRequest();\r\n    createTransactionRequest.setMerchantAuthentication(merchantAuthentication);\r\n    createTransactionRequest.setTransactionRequest(transactionRequest);\r\n\r\n    const ctrl = new APIControllers.CreateTransactionController(\r\n      createTransactionRequest.getJSON()\r\n    );\r\n\r\n    return new Promise((resolve, reject) => {\r\n      ctrl.execute(() => {\r\n        const apiResponse = ctrl.getResponse();\r\n        const response = new APIContracts.CreateTransactionResponse(\r\n          apiResponse\r\n        );\r\n\r\n        if (\r\n          response.getMessages().getResultCode() ===\r\n          APIContracts.MessageTypeEnum.OK\r\n        ) {\r\n          resolve(response);\r\n        } else {\r\n          const errors = response.getMessages().getMessage()\r\n            ? response\r\n                .getMessages()\r\n                .getMessage()\r\n                .map((msg) => msg.getText())\r\n                .join(\", \")\r\n            : \"Unknown error occurred.\";\r\n          reject(new Error(`Authorize.Net error: ${errors}`));\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport default AuthorizeNetGateway;\r\n","'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar API = require('./api');\nvar pkg = require('../package.json');\n\nvar _require = require('./utils/razorpay-utils'),\n    _validateWebhookSignature = _require.validateWebhookSignature;\n\nvar Razorpay = function () {\n  _createClass(Razorpay, null, [{\n    key: 'validateWebhookSignature',\n    value: function validateWebhookSignature() {\n\n      return _validateWebhookSignature.apply(undefined, arguments);\n    }\n  }]);\n\n  function Razorpay() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Razorpay);\n\n    var key_id = options.key_id,\n        key_secret = options.key_secret,\n        headers = options.headers;\n\n\n    if (!key_id) {\n      throw new Error('`key_id` is mandatory');\n    }\n\n    this.key_id = key_id;\n    this.key_secret = key_secret;\n\n    this.api = new API({\n      hostUrl: 'https://api.razorpay.com',\n      ua: 'razorpay-node@' + Razorpay.VERSION,\n      key_id: key_id,\n      key_secret: key_secret,\n      headers: headers\n    });\n    this.addResources();\n  }\n\n  _createClass(Razorpay, [{\n    key: 'addResources',\n    value: function addResources() {\n      Object.assign(this, {\n        accounts: require('./resources/accounts')(this.api),\n        stakeholders: require('./resources/stakeholders')(this.api),\n        payments: require('./resources/payments')(this.api),\n        refunds: require('./resources/refunds')(this.api),\n        orders: require('./resources/orders')(this.api),\n        customers: require('./resources/customers')(this.api),\n        transfers: require('./resources/transfers')(this.api),\n        tokens: require('./resources/tokens')(this.api),\n        virtualAccounts: require('./resources/virtualAccounts')(this.api),\n        invoices: require('./resources/invoices')(this.api),\n        iins: require('./resources/iins')(this.api),\n        paymentLink: require('./resources/paymentLink')(this.api),\n        plans: require('./resources/plans')(this.api),\n        products: require('./resources/products')(this.api),\n        subscriptions: require('./resources/subscriptions')(this.api),\n        addons: require('./resources/addons')(this.api),\n        settlements: require('./resources/settlements')(this.api),\n        qrCode: require('./resources/qrCode')(this.api),\n        fundAccount: require('./resources/fundAccount')(this.api),\n        items: require('./resources/items')(this.api),\n        cards: require('./resources/cards')(this.api),\n        webhooks: require('./resources/webhooks')(this.api),\n        documents: require('./resources/documents')(this.api),\n        disputes: require('./resources/disputes')(this.api)\n      });\n    }\n  }]);\n\n  return Razorpay;\n}();\n\nRazorpay.VERSION = pkg.version;\n\n\nmodule.exports = Razorpay;","import * as Razorpay from \"razorpay\";\r\n\r\nclass RazorpayGateway {\r\n  constructor(keyId, keySecret) {\r\n    /**\r\n     * Initializes the Razorpay gateway with the provided key ID and key secret.\r\n     * @param {string} keyId - Your Razorpay key ID.\r\n     * @param {string} keySecret - Your Razorpay key secret.\r\n     */\r\n    if (!keyId || !keySecret) {\r\n      throw new Error(\"keyId and keySecret are required\");\r\n    }\r\n    this.razorpay = new Razorpay({ key_id: keyId, key_secret: keySecret });\r\n  }\r\n  /**\r\n   * Creates a Payment with Razorpay.\r\n   * @param {number} amount - The amount to be charged in the smallest currency unit.\r\n   * @param {string} currency - The three-letter ISO currency code (e.g., 'INR').\r\n   * @param {string} [description] - An optional description for the payment.\r\n   * @returns {Promise<Object>} - A promise that resolves with the payment object.\r\n   * @throws {Error} - Throws an error if the payment creation fails or validation errors occur.\r\n   */\r\n  async createPaymentIntent(amount, currency, description = \"\") {\r\n    if (typeof amount !== \"number\" || amount <= 0) {\r\n      throw new Error(\"Amount must be a positive number\");\r\n    }\r\n    if (typeof currency !== \"string\" || currency.length !== 3) {\r\n      throw new Error(\"Currency must be a three-letter ISO currency code\");\r\n    }\r\n\r\n    let smallestAmountUnit = amount;\r\n    if (currency === \"jpy\") {\r\n      smallestAmountUnit = amount * 1;\r\n    } else {\r\n      smallestAmountUnit = amount * 100;\r\n    }\r\n\r\n    try {\r\n      const paymentIntent = await this.razorpay.payment_intents.create({\r\n        amount: smallestAmountUnit,\r\n        currency: currency.toUpperCase(),\r\n        receipt: description || undefined,\r\n        notes: description ? { description } : {},\r\n      });\r\n      return paymentIntent;\r\n    } catch (error) {\r\n      throw new Error(`Razorpay Payment failed: ${error.message}`);\r\n    }\r\n  }\r\n}\r\nexport default RazorpayGateway;\r\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst NodePlatformFunctions_js_1 = require(\"./platform/NodePlatformFunctions.js\");\nconst stripe_core_js_1 = require(\"./stripe.core.js\");\nconst Stripe = (0, stripe_core_js_1.createStripe)(new NodePlatformFunctions_js_1.NodePlatformFunctions());\nmodule.exports = Stripe;\n// expose constructor as a named property to enable mocking with Sinon.JS\nmodule.exports.Stripe = Stripe;\n// Allow use with the TypeScript compiler without `esModuleInterop`.\n// We may also want to add `Object.defineProperty(exports, \"__esModule\", {value: true});` in the future, so that Babel users will use the `default` version.\nmodule.exports.default = Stripe;\n","import * as Stripe from \"stripe\";\r\nclass StripeGateway {\r\n  constructor(apiKey) {\r\n    /**\r\n   * Initializes the Stripe gateway with the provided API key.\r\n   * @param {string} apiKey - Your Stripe secret API key.\r\n   */\r\n    this.stripe = new Stripe(apiKey);\r\n  }\r\n\r\n  /**\r\n   * Creates a Payment Intent with Stripe.\r\n   * @param {number} amount - The amount to be charged in the smallest currency unit (e.g., cents for USD).\r\n   * @param {string} currency - The three-letter ISO currency code (e.g., 'usd').\r\n    * @param {string} [description] - An optional description for the payment.\r\n   * @returns {Promise<Object>} - A promise that resolves with the payment intent object.\r\n   * @throws {Error} - Throws an error if the payment creation fails or validation errors occur.\r\n   */\r\n\r\n  async createPaymentIntent(amount, currency  ,description = \"\") {\r\n    if (typeof amount !== \"number\" || amount <= 0) {\r\n      throw new Error(\"Amount must be a positive number\");\r\n    }\r\n    if (typeof currency !== \"string\" || currency.length !== 3) {\r\n      throw new Error(\"Currency must be a three-letter ISO currency code\");\r\n    }\r\n    let smallestAmountUnit = amount;\r\n    if (currency === \"jpy\") {\r\n      smallestAmountUnit = amount * 1;\r\n    } else {\r\n      smallestAmountUnit = amount * 100;\r\n    }\r\n\r\n    try {\r\n      const paymentIntentParams = {\r\n        amount: smallestAmountUnit,\r\n        currency: currency.toUpperCase(),\r\n      };\r\n\r\n      if (description) {\r\n        paymentIntentParams.description = description;\r\n      }\r\n      const paymentIntent = await this.stripe.paymentIntents.create(\r\n        paymentIntentParams\r\n      );\r\n      return paymentIntent;\r\n    } catch (error) {\r\n      throw new Error(`stripe payment failed : ${error.message}`);\r\n    }\r\n  }\r\n}\r\n\r\nexport default StripeGateway;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const StripeGateway = require(\"./lib/stripe.js\");\r\n// const RazorpayGateway = require(\"./lib/razorpay.js\");\r\n// const PayPalGateway = require(\"./lib/Paypal.js\");\r\n// const AuthorizeNetGateway = require(\"./lib/authorizenet.js\");\r\n\r\n// class UnifiPayment {\r\n//   constructor(type, config) {\r\n//     switch (type) {\r\n//       case \"stripe\":\r\n//         this.gateway = new StripeGateway(config.apiKey);\r\n//         break;\r\n//       case \"razorpay\":\r\n//         this.gateway = new RazorpayGateway(config.keyId, config.keySecret);\r\n//         break;\r\n//       case \"paypal\":\r\n//         this.gateway = new PayPalGateway(config.clientId, config.clientSecret);\r\n//         break;\r\n//       case \"authorizenet\":\r\n//         this.gateway = new AuthorizeNetGateway(\r\n//           config.apiLoginId,\r\n//           config.apiTransactionKey\r\n//         );\r\n//         break;\r\n//       default:\r\n//         throw new Error(\"Unsupported payment gateway type\");\r\n//     }\r\n//   }\r\n\r\n//   async createPayment(amount, currency, returnUrl, cancelUrl, environment) {\r\n//     try {\r\n//       if (!amount) {\r\n//         return new Error(\"amount is required\");\r\n//       }\r\n//       if (!currency) {\r\n//         return new Error(\"currency is required\");\r\n//       }\r\n\r\n//       if (this.gateway.createPaymentIntent) {\r\n//         return await this.gateway.createPaymentIntent(amount, currency);\r\n//       } else if (this.gateway.createPayment) {\r\n//         return await this.gateway.createPayment(\r\n//           amount,\r\n//           currency,\r\n//           returnUrl,\r\n//           cancelUrl,\r\n//           environment\r\n//         );\r\n//       } else {\r\n//         throw new Error(\"Unsupported payment gateway type\");\r\n//       }\r\n//     } catch (error) {\r\n//       throw new Error(`Payment processing failed: ${error.message}`);\r\n//     }\r\n//   }\r\n// }\r\n// module.exports =  UnifiPayment;\r\n","import PayPalGateway from \"./lib/Paypal.js\";\r\nimport AuthorizeNetGateway from \"./lib/authorizenet.js\";\r\nimport RazorpayGateway from \"./lib/razorpay.js\";\r\nimport StripeGateway from \"./lib/stripe.js\";\r\nclass UnifiPayment {\r\n  constructor(type, config) {\r\n    switch (type) {\r\n      case \"stripe\":\r\n        this.gateway = new StripeGateway(config.apiKey);\r\n        break;\r\n      case \"razorpay\":\r\n        this.gateway = new RazorpayGateway(config.keyId, config.keySecret);\r\n        break;\r\n      case \"paypal\":\r\n        this.gateway = new PayPalGateway(config.clientId, config.clientSecret);\r\n        break;\r\n      case \"authorizenet\":\r\n        this.gateway = new AuthorizeNetGateway(\r\n          config.apiLoginId,\r\n          config.apiTransactionKey\r\n        );\r\n        break;\r\n      default:\r\n        throw new Error(\"Unsupported payment gateway type\");\r\n    }\r\n  }\r\n\r\n  async createPayment(amount, currency, returnUrl, cancelUrl, environment) {\r\n    try {\r\n      if (!amount) {\r\n        return new Error(\"amount is required\");\r\n      }\r\n      if (!currency) {\r\n        return new Error(\"currency is required\");\r\n      }\r\n\r\n      if (this.gateway.createPaymentIntent) {\r\n        return await this.gateway.createPaymentIntent(amount, currency);\r\n      } else if (this.gateway.createPayment) {\r\n        return await this.gateway.createPayment(\r\n          amount,\r\n          currency,\r\n          returnUrl,\r\n          cancelUrl,\r\n          environment\r\n        );\r\n      } else {\r\n        throw new Error(\"Unsupported payment gateway type\");\r\n      }\r\n    } catch (error) {\r\n      throw new Error(`Payment processing failed: ${error.message}`);\r\n    }\r\n  }\r\n}\r\nexport default UnifiPayment;\r\n\r\n"],"names":["module","exports","require","configure","payment","_payment","paypal","PayPalGateway","constructor","clientId","clientSecret","environment","Error","mode","client_id","client_secret","createPayment","amount","currency","returnUrl","cancelUrl","description","length","create_payment_json","intent","payer","payment_method","redirect_urls","return_url","cancel_url","transactions","total","toFixed","Promise","resolve","reject","create","error","APIContracts","APIControllers","Constants","constants","authorizenet","AuthorizeNetGateway","apiLoginId","apiTransactionKey","this","createPaymentIntent","merchantAuthentication","MerchantAuthenticationType","setName","setTransactionKey","transactionRequest","TransactionRequestType","setTransactionType","TransactionTypeEnum","AUTHCAPTURETRANSACTION","setAmount","setCurrencyCode","toUpperCase","setDescription","createTransactionRequest","CreateTransactionRequest","setMerchantAuthentication","setTransactionRequest","ctrl","CreateTransactionController","getJSON","execute","apiResponse","getResponse","response","CreateTransactionResponse","getMessages","getResultCode","MessageTypeEnum","OK","errors","getMessage","map","msg","getText","join","_createClass","defineProperties","target","props","i","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","API","pkg","_validateWebhookSignature","validateWebhookSignature","Razorpay","options","arguments","undefined","instance","TypeError","_classCallCheck","key_id","key_secret","headers","api","hostUrl","ua","VERSION","addResources","value","apply","assign","accounts","stakeholders","payments","refunds","orders","customers","transfers","tokens","virtualAccounts","invoices","iins","paymentLink","plans","products","subscriptions","addons","settlements","qrCode","fundAccount","items","cards","webhooks","documents","disputes","version","RazorpayGateway","keyId","keySecret","razorpay","smallestAmountUnit","payment_intents","receipt","notes","message","NodePlatformFunctions_js_1","Stripe","createStripe","NodePlatformFunctions","default","StripeGateway","apiKey","stripe","paymentIntentParams","paymentIntents","UnifiPayment","type","config","gateway"],"mappings":"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"}